# -*- coding: utf-8 -*-
"""Polynomial Regression Based Bluffing Detector_for_blogpost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q7n6ieugI3nuhNSlKphZKF3ccXzEUrxF
"""

# Polynomial Regression
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# importing dataset
data_set = pd.read_csv('https://trello-attachments.s3.amazonaws.com/60596dc01945760f799067c1/607e52cfbf5d601da434fa03/f1883022706dfd2ae69d55dd62d8c998/Position_Salaries.csv')
data_set

# Extracting the Independent and Depenedent Variable
X = data_set.Level.values[:,np.newaxis]
y = data_set.Salary.values

# Splitting the dataset into the Training and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_sizw=0.2, random_state=0)

# Build Linear Regression model
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X,y)

# Visualize The Result for Linear Regression
plt.scatter(X,y, color='blue')
plt.plot(X, lin_reg.predict(X), color='red')
plt.title('Detection Model Using Linear Regression')
plt.xlabel('Position Levels')
plt.ylabel('Salaries')
plt.show();

# Building the Polynomial Regression Model with Degree=2
# Fitting the Polynomial Regression to the Dataset
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=2)
x_poly = poly_reg.fit_transform(X)
x_poly

# Fit the Polynomial Degree=2 Regression Model
lin_reg_2 = LinearRegression()
lin_reg_2.fit(x_poly , y)

# Visualize the Result for Polynomial Degree=2 Regression Model
plt.scatter(X,y, color='blue')
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)), color='red')
plt.title('Detection Model Using Polynomial Regression (Degree=2)')
plt.xlabel('Position Levels')
plt.ylabel('Salaries')
plt.show();

# Increase the Polynomial Expression Degree = 3

poly_reg = PolynomialFeatures(degree=3)
x_poly = poly_reg.fit_transform(X)
lin_reg_3 = LinearRegression()
lin_reg_3.fit(x_poly , y)

# Visualize the Result for Polynomial Degree=3 Regression Model
plt.scatter(X,y,color='blue')
plt.plot(X,lin_reg_3.predict(poly_reg.fit_transform(X)),color='red')
plt.title('Detection Model Using Polynomial Regression (Degree = 3)')
plt.xlabel('Position Levels')
plt.ylabel('Salaries')
plt.show()

# Increase the Polynomial Expression Degree = 4 (will give the most accurate result)

poly_reg = PolynomialFeatures(degree=4)
x_poly = poly_reg.fit_transform(X)
lin_reg_4 = LinearRegression()
lin_reg_4.fit(x_poly , y)

# Visualize the Result for Polynomial Degree=4 Regression Model
plt.scatter(X,y,color='blue')
plt.plot(X,lin_reg_4.predict(poly_reg.fit_transform(X)),color='red')
plt.title('Detection Model Using Polynomial Regression (Degree = 4)')
plt.xlabel('Position Levels')
plt.ylabel('Salaries')
plt.show();

# Iterate the Linear Regression Model through X
lin_reg = LinearRegression().fit(X,y)
lin_pred = lin_reg.predict(X)
lin_pred

df_lin_reg = pd.DataFrame(lin_pred, columns=['Pred_Lin_Reg'])
df_lin_reg

# Iterate the exponent of the Polynomial Regression in a loop
prediction_collector = []
for i in [2,3,4]:
  poly_reg = PolynomialFeatures(degree=i)
  
  # Train
  x_poly = poly_reg.fit_transform(X)
  lin_reg_forloop = LinearRegression()
  lin_reg_forloop.fit(x_poly, y)
  
  # Test
  y_pred = lin_reg_forloop.predict(poly_reg.fit_transform(X))

  # To collect the answer
  prediction_collector.append(y_pred)

pred_collector = np.transpose(prediction_collector)
pred_collector

df2 = pd.DataFrame(pred_collector, columns=['Pred_Poly_Degree_2', 'Pred_Poly_Degree_3', 'Pred_Poly_Degree_4'])
df2

df_poly = df2.drop(df2.columns[:2], axis=1, inplace=True)
df2

df = pd.concat([data_set.reset_index(drop=True), df_lin_reg.reset_index(drop=True), df2.reset_index(drop=True)], axis=1)
df

df['Bluffing'] = df.apply(lambda x: 'Yes' if x['Salary'] > x['Pred_Poly_Degree_4'] else 'No', axis=1)
df

# Filter out only the 'Yes'
df = df.loc[df['Bluffing'] == 'Yes']
df2 = df.drop(['Pred_Lin_Reg'], axis=1, inplace=True)
df

df['Real_Bluffing'] = df.apply(lambda x:'Yes' if x['Salary']-x['Pred_Poly_Degree_4'] > 10000 else 'No', axis=1)
df

"""Typically, salary increment is around `10% to 20%`. However, the above table proved that some candidate are lying about their job salary. 

>Eg; `Junior Consultant` is concealing the fact that his/her salary should just be around `31759.906760`, but the amount of Salary put on the job application form is a whopping `57+%!`

Hence, it can be concluded that;
1. Junior Consultant
2. Partner
3. Senior Partner 
and even;
4. CEO 

are lying about the amount of Salary put in the application form. 
"""